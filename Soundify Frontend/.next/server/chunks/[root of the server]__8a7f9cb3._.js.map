{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Soundify/src/app/api/spotify/token/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// Environment variables for Spotify credentials\n// Add these to your .env.local file\nconst CLIENT_ID =\n\tprocess.env.SPOTIFY_CLIENT_ID || \"0bdba0a53936422c95cb4b5663836ce8\";\nconst CLIENT_SECRET =\n\tprocess.env.SPOTIFY_CLIENT_SECRET || \"db4f127c6e4e429d906f2256b8de9cce\";\n\nexport async function GET() {\n\ttry {\n\t\tconsole.log(\"Spotify token request started\");\n\n\t\t// URL for Spotify token endpoint\n\t\tconst url = \"https://accounts.spotify.com/api/token\";\n\n\t\t// Create Base64 encoded Authorization string\n\t\tconst authString = `${CLIENT_ID}:${CLIENT_SECRET}`;\n\t\tconst base64Auth = Buffer.from(authString).toString(\"base64\");\n\n\t\t// Headers for the request\n\t\tconst headers = {\n\t\t\tAuthorization: `Basic ${base64Auth}`,\n\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t};\n\n\t\t// Body data for the request\n\t\tconst body = new URLSearchParams({\n\t\t\tgrant_type: \"client_credentials\",\n\t\t\t// Client credentials flow doesn't support scopes\n\t\t}).toString();\n\n\t\tconsole.log(\"Requesting Spotify token...\");\n\n\t\t// Make the POST request to Spotify\n\t\tconst tokenResponse = await fetch(url, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: body,\n\t\t});\n\n\t\tif (!tokenResponse.ok) {\n\t\t\tconst errorText = await tokenResponse.text();\n\t\t\tconsole.error(\"Failed to fetch token:\", errorText);\n\t\t\treturn NextResponse.json(\n\t\t\t\t{\n\t\t\t\t\terror: `Failed to fetch Spotify token: ${tokenResponse.status}`,\n\t\t\t\t\tdetails: errorText,\n\t\t\t\t},\n\t\t\t\t{ status: tokenResponse.status },\n\t\t\t);\n\t\t}\n\n\t\t// Parse the response\n\t\tconst tokenData = await tokenResponse.json();\n\t\tconsole.log(\"Token received successfully\", tokenData);\n\n\t\t// Return the access token and expiration\n\t\treturn NextResponse.json({\n\t\t\taccessToken: tokenData.access_token,\n\t\t\texpiresIn: tokenData.expires_in || 3600,\n\t\t\ttokenType: tokenData.token_type,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(\"Error getting Spotify token:\", error);\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\terror: \"Internal Server Error\",\n\t\t\t\tdetails: error instanceof Error ? error.message : String(error),\n\t\t\t},\n\t\t\t{ status: 500 },\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,gDAAgD;AAChD,oCAAoC;AACpC,MAAM,YACL,QAAQ,GAAG,CAAC,iBAAiB,IAAI;AAClC,MAAM,gBACL,QAAQ,GAAG,CAAC,qBAAqB,IAAI;AAE/B,eAAe;IACrB,IAAI;QACH,QAAQ,GAAG,CAAC;QAEZ,iCAAiC;QACjC,MAAM,MAAM;QAEZ,6CAA6C;QAC7C,MAAM,aAAa,GAAG,UAAU,CAAC,EAAE,eAAe;QAClD,MAAM,aAAa,OAAO,IAAI,CAAC,YAAY,QAAQ,CAAC;QAEpD,0BAA0B;QAC1B,MAAM,UAAU;YACf,eAAe,CAAC,MAAM,EAAE,YAAY;YACpC,gBAAgB;QACjB;QAEA,4BAA4B;QAC5B,MAAM,OAAO,IAAI,gBAAgB;YAChC,YAAY;QAEb,GAAG,QAAQ;QAEX,QAAQ,GAAG,CAAC;QAEZ,mCAAmC;QACnC,MAAM,gBAAgB,MAAM,MAAM,KAAK;YACtC,QAAQ;YACR,SAAS;YACT,MAAM;QACP;QAEA,IAAI,CAAC,cAAc,EAAE,EAAE;YACtB,MAAM,YAAY,MAAM,cAAc,IAAI;YAC1C,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBACC,OAAO,CAAC,+BAA+B,EAAE,cAAc,MAAM,EAAE;gBAC/D,SAAS;YACV,GACA;gBAAE,QAAQ,cAAc,MAAM;YAAC;QAEjC;QAEA,qBAAqB;QACrB,MAAM,YAAY,MAAM,cAAc,IAAI;QAC1C,QAAQ,GAAG,CAAC,+BAA+B;QAE3C,yCAAyC;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,aAAa,UAAU,YAAY;YACnC,WAAW,UAAU,UAAU,IAAI;YACnC,WAAW,UAAU,UAAU;QAChC;IACD,EAAE,OAAO,OAAO;QACf,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YACC,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAC1D,GACA;YAAE,QAAQ;QAAI;IAEhB;AACD","debugId":null}}]
}