{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Soundify/src/app/api/youtube/search/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// YouTube API key from the provided code\nconst YOUTUBE_API_KEY = \"AIzaSyAtiG_ZCzMX6_n3GZvjZGndJyc0V_pnb5E\";\n\n// Interface for YouTube API response items\ninterface YouTubeSearchItem {\n\tid: {\n\t\tvideoId: string;\n\t};\n\tsnippet?: {\n\t\ttitle?: string;\n\t\tchannelTitle?: string;\n\t\tthumbnails?: Record<string, unknown>;\n\t};\n}\n\n// Interface for our transformed video result\ninterface YouTubeVideo {\n\tvideoId: string;\n\ttitle: string;\n\tchannelTitle: string;\n\tthumbnails: Record<string, unknown>;\n}\n\n// Function to search YouTube by query\nasync function searchYouTube(\n\tquery: string,\n\tmaxResults = 1,\n): Promise<YouTubeVideo[]> {\n\ttry {\n\t\tconst encodedQuery = encodeURIComponent(query);\n\t\tconst url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodedQuery}&type=video&maxResults=${maxResults}&key=${YOUTUBE_API_KEY}`;\n\n\t\tconst response = await fetch(url);\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\n\t\t\t\t`YouTube API error: ${response.status} ${response.statusText}`,\n\t\t\t);\n\t\t}\n\n\t\tconst data = await response.json();\n\n\t\tif (data.items && data.items.length > 0) {\n\t\t\treturn data.items.map((item: YouTubeSearchItem) => ({\n\t\t\t\tvideoId: item.id.videoId,\n\t\t\t\ttitle: item.snippet?.title || \"\",\n\t\t\t\tchannelTitle: item.snippet?.channelTitle || \"\",\n\t\t\t\tthumbnails: item.snippet?.thumbnails || {},\n\t\t\t}));\n\t\t}\n\n\t\treturn [];\n\t} catch (error) {\n\t\tconsole.error(\"Error searching YouTube:\", error);\n\t\tthrow error;\n\t}\n}\n\n// Interface for request body\ninterface SearchRequest {\n\tisrc?: string;\n\ttitle?: string;\n\tartist?: string;\n\tspotifyId?: string;\n}\n\n// Search strategy based on the Python code provided\nexport async function POST(request: Request) {\n\ttry {\n\t\tconst { isrc, title, artist } = (await request.json()) as SearchRequest;\n\n\t\t// Validation\n\t\tif (!isrc && (!title || !artist)) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{\n\t\t\t\t\terror: \"Either ISRC or both title and artist must be provided\",\n\t\t\t\t},\n\t\t\t\t{ status: 400 },\n\t\t\t);\n\t\t}\n\n\t\tlet youtubeVideos: YouTubeVideo[] = [];\n\n\t\t// Strategy 1: Try with ISRC code (most accurate)\n\t\tif (isrc) {\n\t\t\t// Try with both the raw ISRC and a formatted version with \"ISRC\" prefix\n\t\t\tconst queries = [\n\t\t\t\tisrc, // Raw ISRC\n\t\t\t\t`ISRC ${isrc}`, // ISRC with prefix\n\t\t\t\t`${isrc} official`, // ISRC with official keyword\n\t\t\t];\n\n\t\t\t// Try each query until we find results\n\t\t\tfor (const query of queries) {\n\t\t\t\tconst results = await searchYouTube(query, 2);\n\t\t\t\tif (results.length > 0) {\n\t\t\t\t\tyoutubeVideos = results;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Strategy 2: If no results with ISRC, try with title and artist\n\t\tif (youtubeVideos.length === 0 && title && artist) {\n\t\t\t// Try different query formats to increase chances of finding the correct video\n\t\t\tconst queries = [\n\t\t\t\t`${title} ${artist} official audio`,\n\t\t\t\t`${title} ${artist} audio`,\n\t\t\t\t`${title} ${artist} lyrics`,\n\t\t\t\t`${title} ${artist}`,\n\t\t\t];\n\n\t\t\t// Try each query until we find results\n\t\t\tfor (const query of queries) {\n\t\t\t\tyoutubeVideos = await searchYouTube(query, 3);\n\t\t\t\tif (youtubeVideos.length > 0) break;\n\t\t\t}\n\t\t}\n\n\t\t// Strategy 3: Last resort fallback - use a more general search if nothing found\n\t\tif (youtubeVideos.length === 0) {\n\t\t\tconsole.log(\n\t\t\t\t\"No results found with specific search, trying general fallback search\",\n\t\t\t);\n\n\t\t\t// Create a fallback query from whatever information we have\n\t\t\tlet fallbackQuery = \"\";\n\n\t\t\tif (title) {\n\t\t\t\tfallbackQuery = title;\n\t\t\t} else if (isrc) {\n\t\t\t\tfallbackQuery = isrc;\n\t\t\t}\n\n\t\t\t// Try a more generic search with fewer terms and constraints\n\t\t\tif (fallbackQuery) {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log(`Trying fallback search with query: \"${fallbackQuery}\"`);\n\t\t\t\t\tyoutubeVideos = await searchYouTube(fallbackQuery, 5);\n\n\t\t\t\t\tif (youtubeVideos.length > 0) {\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t`Found ${youtubeVideos.length} results with fallback search`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (fallbackError) {\n\t\t\t\t\tconsole.error(\"Error during fallback search:\", fallbackError);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (youtubeVideos.length > 0) {\n\t\t\treturn NextResponse.json({\n\t\t\t\tsuccess: true,\n\t\t\t\tvideos: youtubeVideos,\n\t\t\t\taudioUrl: `https://www.youtube.com/watch?v=${youtubeVideos[0].videoId}`,\n\t\t\t});\n\t\t}\n\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\tsuccess: false,\n\t\t\t\terror: \"No videos found on YouTube\",\n\t\t\t},\n\t\t\t{ status: 404 },\n\t\t);\n\t} catch (error) {\n\t\tconsole.error(\"YouTube search error:\", error);\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\tsuccess: false,\n\t\t\t\terror: \"Error searching YouTube\",\n\t\t\t},\n\t\t\t{ status: 500 },\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}