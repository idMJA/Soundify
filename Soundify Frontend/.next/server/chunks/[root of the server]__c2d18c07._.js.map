{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Soundify/src/app/api/invidious/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\n// Define interfaces for Invidious API responses\r\ninterface InvidiousVideo {\r\n  videoId: string;\r\n  title: string;\r\n  author: string;\r\n  authorId: string;\r\n  lengthSeconds: number;\r\n  videoThumbnails: Array<{\r\n    quality: string;\r\n    url: string;\r\n    width: number;\r\n    height: number;\r\n  }>;\r\n}\r\n\r\ninterface InvidiousSearchResult {\r\n  videos?: InvidiousVideo[];\r\n}\r\n\r\n// Define interfaces for stream formats\r\ninterface InvidiousFormat {\r\n  url: string;\r\n  itag: number;\r\n  type: string;\r\n  quality: string;\r\n  audioQuality?: string;\r\n  container: string;\r\n  encoding: string;\r\n  bitrate: number;\r\n}\r\n\r\ninterface InvidiousStreamInfo {\r\n  title: string;\r\n  videoId: string;\r\n  author: string;\r\n  adaptiveFormats: InvidiousFormat[];\r\n  formatStreams: InvidiousFormat[];\r\n}\r\n\r\n// You can configure a list of Invidious instances to use\r\n// If one fails, the system will try another\r\nconst INVIDIOUS_INSTANCES = [\r\n  \"https://inv.nadeko.net\",  // ðŸ‡¨ðŸ‡± Chile - Primary instance\r\n  \"https://yewtu.be\",        // ðŸ‡©ðŸ‡ª Germany - Backup instance\r\n  \"https://id.420129.xyz\"    // ðŸ‡©ðŸ‡ª Germany - Second backup instance\r\n];\r\n\r\n// Function to search for videos\r\nexport async function searchVideos(query: string): Promise<InvidiousVideo[]> {\r\n  let lastError: Error | null = null;\r\n  \r\n  // Try each instance until one works\r\n  for (const instance of INVIDIOUS_INSTANCES) {\r\n    try {\r\n      console.log(`Searching using Invidious instance: ${instance}`);\r\n      const response = await fetch(`${instance}/api/v1/search?q=${encodeURIComponent(query)}&type=video`, {\r\n        cache: 'no-store',\r\n        next: { revalidate: 0 },\r\n        signal: AbortSignal.timeout(5000) // 5 second timeout\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.warn(`Instance ${instance} returned status: ${response.status}`);\r\n        lastError = new Error(`Instance ${instance} returned status: ${response.status}`);\r\n        continue; // Try the next instance\r\n      }\r\n      \r\n      const data = await response.json() as InvidiousVideo[];\r\n      return data;\r\n    } catch (error) {\r\n      console.warn(`Search with instance ${instance} failed:`, error);\r\n      lastError = error instanceof Error ? error : new Error(String(error));\r\n      // Continue to next instance\r\n    }\r\n  }\r\n  \r\n  // If we reach here, all instances failed\r\n  console.error(\"All Invidious instances failed for search\");\r\n  throw lastError || new Error(\"All Invidious instances failed\");\r\n}\r\n\r\n// Function to get streaming URLs for a video\r\nexport async function getVideoStreams(videoId: string): Promise<InvidiousStreamInfo> {\r\n  let lastError: Error | null = null;\r\n  \r\n  // Try each instance until one works\r\n  for (const instance of INVIDIOUS_INSTANCES) {\r\n    try {\r\n      console.log(`Getting video stream from Invidious instance: ${instance}`);\r\n      const response = await fetch(`${instance}/api/v1/videos/${videoId}`, {\r\n        cache: 'no-store',\r\n        next: { revalidate: 0 },\r\n        signal: AbortSignal.timeout(5000) // 5 second timeout\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.warn(`Instance ${instance} returned status: ${response.status}`);\r\n        lastError = new Error(`Instance ${instance} returned status: ${response.status}`);\r\n        continue; // Try the next instance\r\n      }\r\n      \r\n      const data = await response.json() as InvidiousStreamInfo;\r\n      return data;\r\n    } catch (error) {\r\n      console.warn(`Get video stream with instance ${instance} failed:`, error);\r\n      lastError = error instanceof Error ? error : new Error(String(error));\r\n      // Continue to next instance\r\n    }\r\n  }\r\n  \r\n  // If we reach here, all instances failed\r\n  console.error(\"All Invidious instances failed for video streams\");\r\n  throw lastError || new Error(\"All Invidious instances failed\");\r\n}\r\n\r\n// Function to get the best audio stream URL\r\nexport function getBestAudioStream(streamInfo: InvidiousStreamInfo): string | null {\r\n  // First try to get an audio-only stream from adaptive formats\r\n  const audioStreams = streamInfo.adaptiveFormats.filter(format => \r\n    format.type.startsWith('audio/') || format.audioQuality\r\n  );\r\n  \r\n  // Sort by bitrate (highest first)\r\n  const sortedStreams = [...audioStreams].sort((a, b) => b.bitrate - a.bitrate);\r\n  \r\n  // Return the URL of the highest quality audio stream, or null if none found\r\n  return sortedStreams.length > 0 ? sortedStreams[0].url : null;\r\n}\r\n\r\n// Check if our service is available (for health check)\r\nexport async function GET() {\r\n  // Try each instance until one works\r\n  for (const instance of INVIDIOUS_INSTANCES) {\r\n    try {\r\n      console.log(`Checking health of Invidious instance: ${instance}`);\r\n      const response = await fetch(`${instance}/api/v1/stats`, {\r\n        cache: 'no-store',\r\n        next: { revalidate: 0 },\r\n        signal: AbortSignal.timeout(3000) // 3 second timeout\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        console.warn(`Instance ${instance} health check failed with status: ${response.status}`);\r\n        continue; // Try the next instance\r\n      }\r\n      \r\n      const stats = await response.json();\r\n      return NextResponse.json({ \r\n        status: \"ok\",\r\n        instance,\r\n        stats: {\r\n          version: stats.version,\r\n          software: stats.software\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.warn(`Health check for instance ${instance} failed:`, error);\r\n      // Continue to next instance\r\n    }\r\n  }\r\n  \r\n  // If we reach here, all instances failed\r\n  console.error(\"All Invidious instances failed health check\");\r\n  return NextResponse.json(\r\n    { error: \"All Invidious API instances are not responding\" }, \r\n    { status: 503 }\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Soundify/src/app/api/search/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from \"next/server\";\nimport { searchVideos } from \"../invidious/route\";\n\n// Our local interface to simplify track handling\ninterface FormattedTrack {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: number;\n  uri: string;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get(\"query\");\n    \n    if (!query) {\n      return NextResponse.json(\n        { error: \"Query parameter is required\" }, \n        { status: 400 }\n      );\n    }\n    \n    try {\n      // Use Invidious API to search for videos\n      const searchResults = await searchVideos(query);\n      \n      if (!searchResults || !Array.isArray(searchResults) || searchResults.length === 0) {\n        console.log(\"No tracks found in search results\");\n        return NextResponse.json({ tracks: [] });\n      }\n      \n      // Format the results\n      const tracks: FormattedTrack[] = searchResults.map(video => {\n        // Get the best thumbnail\n        const thumbnail = video.videoThumbnails.find(t => t.quality === 'medium')?.url || \n                          video.videoThumbnails[0]?.url || \n                          `https://i.ytimg.com/vi/${video.videoId}/mqdefault.jpg`;\n                          \n        return {\n          id: video.videoId,\n          title: video.title || 'Unknown Title',\n          artist: video.author || 'Unknown Artist',\n          thumbnail,\n          duration: video.lengthSeconds || 0,\n          uri: `https://www.youtube.com/watch?v=${video.videoId}`\n        };\n      });\n      \n      return NextResponse.json({ tracks });\n    } catch (error) {\n      console.error(\"Search method error:\", error);\n      console.error(\"Error details:\", error instanceof Error ? error.stack : String(error));\n      \n      const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n      \n      return NextResponse.json(\n        { error: `Invidious search failed: ${errorMessage}` }, \n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    console.error(\"Search error:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    return NextResponse.json(\n      { error: `Failed to search tracks: ${errorMessage}` }, \n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAYO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;QAE/B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI;YACF,yCAAyC;YACzC,MAAM,gBAAgB,MAAM,CAAA,GAAA,yIAAA,CAAA,eAAY,AAAD,EAAE;YAEzC,IAAI,CAAC,iBAAiB,CAAC,MAAM,OAAO,CAAC,kBAAkB,cAAc,MAAM,KAAK,GAAG;gBACjF,QAAQ,GAAG,CAAC;gBACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,QAAQ,EAAE;gBAAC;YACxC;YAEA,qBAAqB;YACrB,MAAM,SAA2B,cAAc,GAAG,CAAC,CAAA;gBACjD,yBAAyB;gBACzB,MAAM,YAAY,MAAM,eAAe,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,OAAO,KAAK,WAAW,OACzD,MAAM,eAAe,CAAC,EAAE,EAAE,OAC1B,CAAC,uBAAuB,EAAE,MAAM,OAAO,CAAC,cAAc,CAAC;gBAEzE,OAAO;oBACL,IAAI,MAAM,OAAO;oBACjB,OAAO,MAAM,KAAK,IAAI;oBACtB,QAAQ,MAAM,MAAM,IAAI;oBACxB;oBACA,UAAU,MAAM,aAAa,IAAI;oBACjC,KAAK,CAAC,gCAAgC,EAAE,MAAM,OAAO,EAAE;gBACzD;YACF;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE;YAAO;QACpC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,QAAQ,KAAK,CAAC,kBAAkB,iBAAiB,QAAQ,MAAM,KAAK,GAAG,OAAO;YAE9E,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAE9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,yBAAyB,EAAE,cAAc;YAAC,GACpD;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,CAAC,yBAAyB,EAAE,cAAc;QAAC,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}